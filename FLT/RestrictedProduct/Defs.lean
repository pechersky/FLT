import Mathlib

section AntiRingFilterBasis

variable {R : Type*} [Ring R] [TopologicalSpace R] [TopologicalRing R]

/- The point of `RingFilterBasis` is "if these subsets of a ring satisfy some axioms
then there's a topological ring structure such that these subsets are the
open neighbourhoods of 0".

The below lemmas are the converse to this.
-/

namespace TopologicalRing

open scoped Pointwise

lemma ringFilterBasis_add {U : Set R} (hUopen : IsOpen U) (hU0 : 0 ‚àà U) :
    ‚àÉ V : Set R, IsOpen V ‚àß 0 ‚àà V ‚àß V + V ‚äÜ U := by
  sorry

lemma ringFilterBasis_neg {U : Set R} (hUopen : IsOpen U) (hU0 : 0 ‚àà U) :
    ‚àÉ V : Set R, IsOpen V ‚àß 0 ‚àà V ‚àß V ‚äÜ (fun x ‚Ü¶ -x) ‚Åª¬π' U := by
  sorry

lemma ringFilterBasis_mul {U : Set R} (hUopen : IsOpen U) (hU0 : 0 ‚àà U) :
    ‚àÉ V : Set R, IsOpen V ‚àß 0 ‚àà V ‚àß V * V ‚äÜ U := by
  sorry

lemma ringFilterBasis_mul_left (r : R) {U : Set R} (hUopen : IsOpen U) (hU0 : 0 ‚àà U) :
    ‚àÉ V : Set R, IsOpen V ‚àß 0 ‚àà V ‚àß V ‚äÜ (fun x ‚Ü¶ r * x) ‚Åª¬π' U := by
  sorry

lemma ringFilterBasis_mul_right (r : R) {U : Set R} (hUopen : IsOpen U) (hU0 : 0 ‚àà U) :
    ‚àÉ V : Set R, IsOpen V ‚àß 0 ‚àà V ‚àß V ‚äÜ (fun x ‚Ü¶ x * r) ‚Åª¬π' U := by
  sorry

end TopologicalRing

end AntiRingFilterBasis

variable {Œπ : Type*}

namespace Ring

variable (R : Œπ ‚Üí Type*) [‚àÄ i, Ring (R i)] (A : (i : Œπ) ‚Üí Subring (R i))

def RestrictedProduct := {x : (i : Œπ) ‚Üí R i // ‚àÄ·∂† i in Filter.cofinite, x i ‚àà A i}

namespace RestrictedProduct

instance (R : Œπ ‚Üí Type*) [‚àÄ i, Ring (R i)] (A : (i : Œπ) ‚Üí Subring (R i)) :
    Ring (RestrictedProduct R A) where
  add x y := ‚ü®fun i ‚Ü¶ x.1 i + y.1 i, sorry‚ü©
  add_assoc := sorry
  zero := ‚ü®fun i ‚Ü¶ 0, sorry‚ü©
  zero_add := sorry
  add_zero := sorry
  nsmul n x := ‚ü®fun i ‚Ü¶ n ‚Ä¢ x.1 i, sorry‚ü© -- is this a good idea or not? Someone who understands
                                          -- nsmul diamond issues should be asked about this.
  nsmul_zero := sorry -- ditto
  nsmul_succ := sorry -- ditto
  add_comm := sorry
  mul x y := ‚ü®fun i ‚Ü¶ x.1 i * y.1 i, sorry‚ü©
  left_distrib := sorry
  right_distrib := sorry
  zero_mul := sorry
  mul_zero := sorry
  mul_assoc := sorry
  one := ‚ü®fun i ‚Ü¶ 1, sorry‚ü©
  one_mul := sorry
  mul_one := sorry
  neg x := ‚ü®fun i ‚Ü¶ -x.1 i, sorry‚ü©
  neg_add_cancel := sorry
  zsmul z x := ‚ü®fun i ‚Ü¶ z ‚Ä¢ x.1 i, sorry‚ü© -- similarly this should be checked.
  zsmul_zero' := sorry -- ditto
  zsmul_succ' := sorry -- ditto
  zsmul_neg' := sorry -- ditto

def structureMap : (‚àÄ i, A i) ‚Üí+* (RestrictedProduct R A) where
  toFun x := ‚ü®fun i ‚Ü¶ (x i).1, sorry‚ü©
  map_zero' := rfl
  map_one' := rfl
  map_add' x y := rfl
  map_mul' x y := rfl

instance : Module (‚àÄ i, A i) (RestrictedProduct R A) := (structureMap R A).toModule

section Topology

variable [‚àÄ i, TopologicalSpace (R i)] [‚àÄ i, TopologicalRing (R i)]
    (hAopen : ‚àÄ i, IsOpen (A i : Set (R i)))

def ringFilterBasis : RingFilterBasis (RestrictedProduct R A) where
  sets := {U | ‚àÉ V : Set (‚àÄ i, A i), IsOpen V ‚àß 0 ‚àà V ‚àß structureMap R A '' V = U}
  nonempty := ‚ü®_, ‚ä§, isOpen_univ, trivial, rfl‚ü©
  inter_sets := by
    rintro _ _ ‚ü®V, hVopen, hV0, rfl‚ü© ‚ü®W, hWopen, hW0, rfl‚ü©
    exact ‚ü®structureMap R A '' (V ‚à© W), ‚ü®V ‚à© W, IsOpen.inter hVopen hWopen, Set.mem_inter hV0 hW0,
      rfl‚ü©, Set.image_inter_subset _ _ _‚ü©
  zero' {_} := by
    rintro ‚ü®V, hVopen, hV0, rfl‚ü©
    exact ‚ü®0, hV0, rfl‚ü©
  add' {_} := by
    rintro ‚ü®V, hVopen, hV0, rfl‚ü©
    obtain ‚ü®W, hWopen, hW0, hWadd‚ü© := TopologicalRing.ringFilterBasis_add hVopen hV0
    refine ‚ü®_, ‚ü®W, hWopen, hW0, rfl‚ü©, ?_‚ü©
    rintro _ ‚ü®_, ‚ü®x, hx, rfl‚ü©, _, ‚ü®y, hy, rfl‚ü©, rfl‚ü©
    exact ‚ü®x + y, hWadd <| Set.add_mem_add hx hy, rfl‚ü©
  neg' {_} := by
    rintro ‚ü®V, hVopen, hV0, rfl‚ü©
    obtain ‚ü®W, hWopen, hW0, hWneg‚ü© := TopologicalRing.ringFilterBasis_neg hVopen hV0
    refine ‚ü®_, ‚ü®W, hWopen, hW0, rfl‚ü©, ?_‚ü©
    rintro _ ‚ü®x, hx, rfl‚ü©
    exact ‚ü®-x, hWneg hx, rfl‚ü©
  conj' r {_} := by
    rintro ‚ü®V, hVopen, hV0, rfl‚ü©
    refine ‚ü®_, ‚ü®V, hVopen, hV0, rfl‚ü©, ?_‚ü©
    simp
  mul' {_} := by
    rintro ‚ü®V, hVopen, hV0, rfl‚ü©
    obtain ‚ü®W, hWopen, hW0, hWmul‚ü© := TopologicalRing.ringFilterBasis_mul hVopen hV0
    refine ‚ü®_, ‚ü®W, hWopen, hW0, rfl‚ü©, ?_‚ü© -- wtong, need smaller V
    rintro _ ‚ü®_, ‚ü®x, hx, rfl‚ü©, _, ‚ü®y, hy, rfl‚ü©, rfl‚ü©
    exact ‚ü®x * y, hWmul <| Set.mul_mem_mul hx hy, rfl‚ü©
  mul_left' r {_} := by
    rintro ‚ü®V, hVopen, hV0, rfl‚ü©
    -- strat: shrink V to make it ‚àè·µ¢ V·µ¢ with V·µ¢ open in A·µ¢ and V·µ¢ = A·µ¢ for all but finitely many i.
    -- Now define W·µ¢ open in A·µ¢ thus. If V·µ¢ = A·µ¢ and r·µ¢ ‚àà A·µ¢ then set W·µ¢ = A·µ¢ (this happens for
    -- all but finitely many i). Now what about the bad i?
    -- For these, apply `ringFilterBasis_mul_left` to R·µ¢, r·µ¢ and the image of V·µ¢ to get
    -- W·µ¢ with r·µ¢W·µ¢ ‚äÜ V·µ¢. Then ‚àè·µ¢ W·µ¢ works.
    sorry
  mul_right' := sorry -- probably have to repeat the argument mutatis mutandis.

instance : TopologicalSpace (RestrictedProduct R A) := (ringFilterBasis R A).topology

-- instance : TopologicalRing (RestrictedProduct R A) := inferInstance

/-
RingSubgroupsBasis.hasBasis_nhds_zero.{u_1, u_2} {A : Type u_1} {Œπ : Type u_2} [Ring A] [Nonempty Œπ]
  {B : Œπ ‚Üí AddSubgroup A} (hB : RingSubgroupsBasis B) : (ùìù 0).HasBasis (fun x ‚Ü¶ True) fun i ‚Ü¶ ‚Üë(B i)
-/

-- PR and refactor `RingSubgroupsBasis.hasBasis_nhds_zero`
open Filter in
lemma _root_.RingFilterBasis.hasBasis_nhds_zero {A : Type*} [Ring A]
    (B : RingFilterBasis A) : HasBasis (@nhds A B.topology 0) (fun _ => True)
    fun (i : {S // S ‚àà B.sets}) => i :=
  ‚ü®by
    intro s
    rw [B.toAddGroupFilterBasis.nhds_zero_hasBasis.mem_iff]
    constructor
    ¬∑ rintro ‚ü®t, h0, hi‚ü©
      exact ‚ü®‚ü®t, h0‚ü©, trivial, hi‚ü©
    ¬∑ rintro ‚ü®i, -, hi‚ü©
      exact ‚ü®i.1, i.2, hi‚ü©‚ü©

lemma continuous_structureMap : Continuous (structureMap R A) := by
  -- this must help
  have := RingFilterBasis.hasBasis_nhds_zero (ringFilterBasis R A)
  sorry

lemma isOpenMap_structureMap : IsOpenMap (structureMap R A) := by
  sorry

end Topology

end Ring.RestrictedProduct
